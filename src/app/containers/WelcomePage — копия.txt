import React, {Component} from 'react';
import AppHeader from "../components/AppHeader";
import t from './../locales/translation';
import Button from './../components/Button';
import '../../scss/pages/_welcomepage.scss'
import env from "../../app_environment";
const {shell} = require('electron');
import {Redirect} from 'react-router-dom'

import {check_port, check_security_apps, check_wifi, disable_wifi, firewallCheck} from "../scripts/wifi";
import {ProgressBar} from "react-bootstrap";
import ButtonOutline from "../components/ButtonOutline";

import {firewallEnabled} from "../scripts/firewall";
import '../../css/homePage.css'
import Loading from "../components/Loading";


const COUNT_SECONDS = env.SEARCH_DELAY;
//import {check} from "../scripts/wifi";
//const WiFiControl = require('wifi-control');


//const timeout = 5000;

//WiFiControl.init({
//    debug: true,
//    connectionTimeout: timeout
//});
/**
 * Welcome page displays welcome message and button to scan the appliances
 */
class WelcomePage extends Component {
    constructor(props) {
        super(props);
        const disableNetworkPath = "http://lmgtfy.com/?q=how+to+disable+network";
        const disableFirewallPath = "http://lmgtfy.com/?q=how+to+disable+firewall+windows+10";

        console.log('constructor');
        //check_wifi().then(res => console.log(res));

        this.state = {
            redirectToSearch: false,
            //timeLeft: COUNT_SECONDS,
            timeLeft: 1,
            progress: 0,
            redirectToErrorPage: false,
            isWiFiConnected: undefined,
            port: check_port(),
            securityApp: check_security_apps(),
            firewall: undefined
        };

        this.clickOnShowDisableNetwork = () => {
            shell.openExternal(disableNetworkPath);
        };

        this.clickOnShowDisableFirewall = () => {
            shell.openExternal(disableFirewallPath);
        };

        this.clickOnScanBtn = () => {
            this.setState({
                redirectToSearch: true
            })
        };

        this.clickOnCancelBtn = () => {
            this.setState({
                redirectToErrorPage: true
            })
        };
        this.disableWiFi=this.disableWiFi.bind(this);
    }

    disableWiFi(){
        disable_wifi();
        this.setState({isWiFiConnected:false})
    }
    // componentDidMount() {

    // }

    componentDidMount() {
        console.log('did mount');
        check_wifi().then(res => {
            console.log('did mount callback: ' + res);
            this.setState({isWiFiConnected: res})
        });
        firewallEnabled().then(res => {
            console.log('did mount callback: ' + res);
            this.setState({firewall: res})
        });
        this.timer = setInterval(() => {
            let timeLeft = this.state.timeLeft - 1;
            // let progress = this.state.progress + (100 / COUNT_SECONDS);

            if (timeLeft === 0) {
                clearInterval(this.timer);
            }
            this.setState({
                timeLeft: timeLeft,
                // progress: progress
            })
        }, 1000)
    }

    componentWillUnmount() {
        if (this.timer) {
            clearInterval(this.timer);
        }
    }

    render() {

        let redirect = this.state.redirectToSearch;

        let redirectToErrorPage = this.state.redirectToErrorPage;

        let redirectToAppliancesPage = false;

        //try to fetch appliances, appliances store in localStorage
        let appliances = JSON.parse(localStorage.getItem("message")).storages;

        //if timer left and appliances not found redirect to "error" page
        //else redirect to page with appliances
        console.log('rendered');
        return (
            <div>
                <AppHeader/>
                <div className="container">
                    {/*<div className="row justify-content-center">
                        <div className="col-12 text-center">
                            <h1 className="welcome-page-title">{t.WELCOME_TITLE}</h1>
                        </div>
                    </div>
                    <div className="row justify-content-center">
                        <div className="col-4 text-center">
                            <p>{t.ABOUT_TOOL}</p>
                        </div>
                    </div>
                    <div className="row justify-content-center">
                        <p className="text-center"><b>1.</b> {t.WIFI_NETWORKS}</p>
                    </div>
                    <div className="row justify-content-center">
                        <p className="show-link" onClick={this.clickOnShowDisableNetwork}>  {t.SHOW_ME_HOW}</p>
                    </div>
                    <div className="row justify-content-center">
                        <p className="text-center"><b>2.</b> {t.PC_FIRE_WALL}</p>
                    </div>
                    <div className="row justify-content-center">
                        <p className="show-link" onClick={this.clickOnShowDisableFirewall}>  {t.SHOW_ME_HOW}</p>
                    </div>
                    <div className="row justify-content-center">
                        <Button available={true} text={t.SCAN_APPLIANCES} onClick={this.clickOnScanBtn}/>
                    </div>*/}
                    {/*redirect to next page*/}
                    <div className="scroll">
                        <div className="row justify-content-center">
                            <div className="col-12 text-center">
                                <h1 className="welcome-page-title">{t.WELCOME_TITLE}</h1>
                            </div>
                        </div>
                        <div className="row justify-content-center">
                            <div className="col-4 text-center">
                                <p>{t.ABOUT_TOOL}</p>
                            </div>
                        </div>
                        {/*<div className="row justify-content-center">
                            <div className="col-12 text-center">
                                <h2 className="search-title">{t.TESTING}</h2>
                            </div>
                        </div>
                         <div className="row justify-content-center search-page-cancel-btn">
                            <ButtonOutline text="Cancel" onClick={this.clickOnCancelBtn}/>
                        </div>
                        {/*<ProgressBar active now={this.state.progress}/>*/}
                        {this.state.timeLeft ? <Loading/> :
                            <div>
                                <div className='test-list'>
                                    {/*console.log("render" + this.state.isWiFiConnected)*/}
                                    {this.state.isWiFiConnected ?
                                        <div className="alert alert-danger">1.Wi-Fi : Enabled
                                            <button className="btn btn-light btn-cust" onClick={this.disableWiFi}>
                                                Disable Wi-Fi
                                            </button>
                                        </div>
                                            :
                                        <div className="alert alert-success">1.Wi-Fi : Disabled</div>}
                                </div>
                                {/*<div className='test-list'>
                                    {this.state.port ? <div className="alert alert-danger"> 2.Ports : Enabled</div> :
                                        <div className="alert alert-success">2.Ports : Disabled</div>}
                                </div>*/}
                                <div className='test-list'>
                                    {this.state.securityApp ?
                                        <div className="alert alert-danger"> 3.Security apps : Enabled</div> :
                                        <div className="alert alert-success">3.Security apps : Disabled</div>}
                                </div>
                                <div className='test-list'>
                                    {this.state.firewall ?
                                        <div className="alert alert-danger">
                                            3.Firewall : Enabled
                                        </div> :
                                        <div className="alert alert-success">
                                            3.Firewall : Disabled
                                        </div>}
                                </div>
                                <div className="row justify-content-center">
                                    <Button available={true} text={t.SCAN_APPLIANCES} onClick={this.clickOnScanBtn}/>
                                </div>
                            </div>}
                    </div>
                    {redirect ? <Redirect to="/search"/> : null}
                </div>
            </div>
        )
    }
}

export default WelcomePage;
